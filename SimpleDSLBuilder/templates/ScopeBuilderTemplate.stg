BuilderTemplate(packageName, builder) ::= <<
<! Template for SimpleBuilder with extern Model which has to be in same package than given to the template 
next Step: with Introspection looking for attributes and setters !>
package <packageName>;

<builder.imports:{imp| import <imp>;<\n>}>

public class <builder.dslName>Builder {

	<builder.chainMethods.keys:{k|<createAttributes(k,builder.chainMethods.(k))>}>
		
	<builder.chainMethods.keys:{k|<createScopeAttributes(k)>}>	<createScopeAttributes(builder.buildMethodName)>
	
	private <builder.dslName>Builder(){
		<builder.chainMethods.keys:{k|<instantiateScopes(k)>}>		<instantiateScopes(builder.buildMethodName)>
	}
	
	<createEPMethod(builder.entryPointMethod, builder.dslName)>
	
	<builder.chainMethods.keys:{k |<createScopeClass(builder.dslName,k,builder.chainMethods.(k),builder.nextMethods.(k))>}>
	
	<createBuildScopeClass(builder.dslName,builder.buildMethodName,builder.chainMethods)>

}
>>

createEPMethod(methodHeader, builderName) ::= <<
    /**
    *
    * Entry point method. This method provides access to the DSL.
    * Use a static import in your code to use the DSL without context.
    */
    public static <builderName>Builder <methodHeader>() {
    	<builderName>Builder builder = new <builderName>Builder();
    	return builder;
    }
>>

createScopeClass(builderName, methodName, parameterType, nextMethod) ::= <<
    /**
    * Generated Scope Class for method order
    */
    public class <methodName;format="cap">Scope {
    	
    	public <nextMethod;format="cap">Scope <methodName> (<parameterType> val) {
    		//TODO auto generated chain method codeblock
    		//You probably want to check the val
    		<builderName>Builder.this.<methodName>Value = val;
    		return <builderName>Builder.this.<nextMethod>Scope;
    	}
    
    }
    
>>

createBuildScopeClass(builderName, methodName, chainMethods) ::= <<
    /**
    *
    * Generated build method
    */
    public class <methodName;format="cap">Scope {
    	
    	public <builderName> <methodName> () {
    		//TODO auto generated build method codeblock
    		<builderName> modelInstance = new <builderName>();
    		<chainMethods.keys:{m |modelInstance.set<m;format="cap">(<builderName>Builder.this.<m>Value); <\n>}>
    		return modelInstance;
    	}
    
    }
    
>>


createChainMethod(builderName,methodName, parameterType) ::= <<

    /**
    * Generated chain method.
    *
    */
    public <builderName>Builder <methodName> (<parameterType> val) {
    	//TODO auto generated chain method codeblock
    	this.<methodName>Value = val;
    	return this;
    }
    
>>

createScopeAttributes(methodName) ::= <<
private final <methodName;format="cap">Scope <methodName>Scope;<\n>
>>

instantiateScopes(methodName) ::= <<
this.<methodName>Scope = this.new <methodName;format="cap">Scope();<\n>
>>

createAttributes(methodName, parameterType) ::= <<
private <parameterType> <methodName>Value;<\n>
>>
