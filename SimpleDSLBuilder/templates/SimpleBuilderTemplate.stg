BuilderTemplate(packageName, builder) ::= <<
<! Template for SimpleBuilder with extern Model which has to be in same package than given to the template 
next Step: with Introspection looking for attributes and setters !>
package <packageName>;

<builder.imports:{imp| import <imp>;}>

public class <builder.dslName>Builder {

	private <builder.dslName>Builder(){}
	
	<builder.chainMethods.keys:{k|<createAttributes(k,builder.chainMethods.(k))>}>
	
	<createEPMethod(builder.entryPointMethod, builder.dslName)>
	
	<builder.chainMethods.keys:{k |<createChainMethod(builder.dslName,k,builder.chainMethods.(k))>}>
	
	<createBuildMethod(builder.buildMethodName, builder.dslName,builder.chainMethods)>

}
>>

createEPMethod(methodHeader, builderName) ::= <<
    /**
    *
    * Entry point method. This method provides access to the DSL.
    * Use a static import in your code to use the DSL without context.
    */
    public static <builderName>Builder <methodHeader>() {
    	<builderName>Builder builder = new <builderName>Builder();
    	return builder;
    }
>>


createChainMethod(builderName,methodName, parameterType) ::= <<

    /**
    * Generated chain method.
    *
    */
    public <builderName>Builder <methodName> (<parameterType> val) {
    	//TODO auto generated chain method codeblock
    	this.<methodName><parameterType> = val;
    	return this;
    }
    
>>

createBuildMethod(methodHeader, builderName, chainMethods) ::= <<
    /**
    *
    * Generated build method
    */
    public <builderName> <methodHeader>() {
    	//TODO auto generated build method codeblock
    	<builderName> modelInstance = new <builderName>();
    	<chainMethods.keys:{m |modelInstance.set<m;format="cap"><chainMethods.(m)>(this.<m><chainMethods.(m)>); <\n>}>
    	return modelInstance;
    }
>>

createAttributes(methodName, parameterType) ::= <<
private <parameterType> <methodName><parameterType>;<\n>
>>