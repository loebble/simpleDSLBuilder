BuilderTemplate(packageName, builder) ::= <<
<! Template for SimpleBuilder with extern Model which has to be in same package than given to the template 
next Step: with Introspection looking for attributes and setters !>
package <packageName>;

<builder.imports:{imp| import <imp>;<\n>}>

public class <builder.dslName>Builder {
	//mandatory Attributes
	<builder.chainMethods.keys:{k|<createAttributes(k,builder.chainMethods.(k))>}>
	//optional Attributes
	<builder.optionalMethods.keys:{k|<createOptionalAttributes(k,builder.optionalMethods.(k))>}>
	//mandatory Scopes
	<builder.chainMethods.keys:{k|<createScopeAttributes(k)>}>
	<createScopeAttributes(builder.buildMethodName)>
	//optional Scopes
	<builder.optionalMethods.keys:{k|<createScopeAttributes(k)>}>
		
	private <builder.dslName>Builder(){
		<builder.chainMethods.keys:{k|<instantiateScopes(k)>}>
		<instantiateScopes(builder.buildMethodName)>
		<builder.optionalMethods.keys:{k|<instantiateScopes(k)>}>
	}
	
	<createEPMethod(builder.entryPointMethod, builder.dslName,first(builder.chainMethods.keys))>
	
	<builder.chainMethods.keys:{k |<createScopeClass(builder.dslName,k,builder.chainMethods.(k),builder.nextMethods.(k))>}>
	
	<builder.optionalMethods.keys:{k |<createOptionalScopeClass(builder.dslName,k,builder.optionalMethods.(k),builder.nextMethods.(k),builder.buildMethodName)>}>
	
	<createBuildScopeClass(builder.dslName,builder.buildMethodName,builder.chainMethods,builder.optionalMethods)>

}
>>

createEPMethod(methodHeader, builderName, firstMethodName) ::= <<
    /**
    *
    * Entry point method. This method provides access to the DSL.
    * Use a static import in your code to use the DSL without context.
    */
    public static <firstMethodName; format="cap">Scope <methodHeader>() {
    	<builderName>Builder builder = new <builderName>Builder();
    	return builder.<firstMethodName>Scope;
    }
>>

createScopeClass(builderName, methodName, parameterType, nextMethod) ::= <<
    /**
    * Generated Scope Class for method order
    */
    public class <methodName;format="cap">Scope {
    	
    	public <nextMethod;format="cap">Scope <methodName> (<parameterType> val) {
    		//TODO auto generated chain method codeblock
    		//You probably want to check the val
    		<builderName>Builder.this.<methodName>Value = val;
    		return <builderName>Builder.this.<nextMethod>Scope;
    	}
    
    }
    
>>

createOptionalScopeClass(builderName, methodName, parameterType, nextMethod, buildMethodName) ::= <<
    /**
    * Generated Optional Scope Class
    */
    public class <methodName;format="cap">Scope extends <buildMethodName;format="cap">Scope{
    	
    	public <nextMethod;format="cap">Scope <methodName> (<parameterType> val) {
    		//TODO auto generated chain method codeblock
    		//You probably want to check the val
    		<builderName>Builder.this.<methodName>Value = val;
    		<builderName>Builder.this.<methodName>ValueIsSet = true;
    		return <builderName>Builder.this.<nextMethod>Scope;
    	}
    
    }
    
>>

createBuildScopeClass(builderName, methodName, chainMethods, optionalMethods) ::= <<
    /**
    *
    * Generated Build Scope
    */
    public class <methodName;format="cap">Scope {
    	
    	public <builderName> <methodName> () {
    		//TODO auto generated build method codeblock
    		<builderName> modelInstance = new <builderName>();
    		<chainMethods.keys:{m |modelInstance.set<m;format="cap">(<builderName>Builder.this.<m>Value); <\n>}>
    		<optionalMethods.keys:{om |if(<om>ValueIsSet)<\n>	modelInstance.set<om;format="cap">(<builderName>Builder.this.<om>Value); <\n>}>
    		return modelInstance;
    	}
    
    }
    
>>

createScopeAttributes(methodName) ::= <<
private final <methodName;format="cap">Scope <methodName>Scope;<\n>
>>

instantiateScopes(methodName) ::= <<
this.<methodName>Scope = this.new <methodName;format="cap">Scope();<\n>
>>

createAttributes(methodName, parameterType) ::= <<
private <parameterType> <methodName>Value;<\n>
>>
createOptionalAttributes(methodName, parameterType) ::= <<
private <parameterType> <methodName>Value;
private boolean <methodName>ValueIsSet = false;<\n>
>>

